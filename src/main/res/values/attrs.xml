<?xml version="1.0" encoding="utf-8"?>
<resources>

    <declare-styleable name="EvenlySpacedLayout">
        <attr name="orientation">
            <enum name="horizontal" value="0" />
            <enum name="vertical" value="1" />
        </attr>
        <attr name="keepEndSpace" format="boolean" />
    </declare-styleable>
    <declare-styleable name="BriefView" />

    <!-- Give ourselves access to MarginLayout's styleables -->
    <declare-styleable name="ViewGroup_MarginLayout">
        <attr name="android:layout_margin" />
        <attr name="android:layout_marginLeft" />
        <attr name="android:layout_marginTop" />
        <attr name="android:layout_marginRight" />
        <attr name="android:layout_marginBottom" />
    </declare-styleable>

    <!-- Alignment constants. -->
    <attr name="alignmentMode">

        <!--
                Align the bounds of the children.
				See {@link android.widget.GridLayout#ALIGN_BOUNDS}.
        -->
        <enum name="alignBounds" value="0" />
        <!--
                Align the margins of the children.
				See {@link android.widget.GridLayout#ALIGN_MARGINS}.
        -->
        <enum name="alignMargins" value="1" />
    </attr>

    <declare-styleable name="GridLayout">

        <!--
                The orientation property is not used during layout. It is only used to
				allocate row and column parameters when they are not specified by its children's
				layout paramters. GridLayout works like LinearLayout in this case;
				putting all the components either in a single row or in a single column -
				depending on the value of this flag. In the horizontal case, a columnCount
				property may be additionally supplied to force new rows to be created when a
				row is full. The rowCount attribute may be used similarly in the vertical case.
				The a is horizontal.
        -->
        <attr name="android:orientation" />
        <!-- The maxmimum number of rows to create when automatically positioning children. -->
        <attr name="rowCount" format="integer" />
        <!-- The maxmimum number of columns to create when automatically positioning children. -->
        <attr name="columnCount" format="integer" />
        <!--
                When set to true, tells GridLayout to use a margins when none are specified
				in a view's layout parameters.
				The a value is false.
				See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.
        -->
        <attr name="useDefaultMargins" format="boolean" />
        <!--
                When set to alignMargins, causes alignment to take place between the outer
				boundary of a view, as defined by its margins. When set to alignBounds,
				causes alignment to take place between the edges of the view.
				The a is alignMargins.
				See {@link android.widget.GridLayout#setAlignmentMode(int)}.
        -->
        <attr name="alignmentMode" />
        <!--
                When set to true, forces row boundaries to appear in the same order
				as row indices.
				The a is true.
				See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.
        -->
        <attr name="rowOrderPreserved" format="boolean" />
        <!--
                When set to true, forces column boundaries to appear in the same order
				as column indices.
				The a is true.
				See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.
        -->
        <attr name="columnOrderPreserved" format="boolean" />
    </declare-styleable>
    
    <declare-styleable name="GridLayout_Layout">

        <!--
                The row boundary delimiting the top of the group of cells
				occupied by this view.
        -->
        <attr name="layout_row" format="integer" />
        <!--
                The row span: the difference between the bottom and top
				boundaries delimiting the group of cells occupied by this view.
				The a is one.
				See {@link android.widget.GridLayout.Spec}.
        -->
        <attr name="layout_rowSpan" format="integer" min="1" />
        <!--
                The column boundary delimiting the left of the group of cells
				occupied by this view.
        -->
        <attr name="android:layout_column" />
        <!--
                The column span: the difference between the right and left
				boundaries delimiting the group of cells occupied by this view.
				The a is one.
				See {@link android.widget.GridLayout.Spec}.
        -->
        <attr name="layout_columnSpan" format="integer" min="1" />
        <!--
                Gravity specifies how a component should be placed in its group of cells.
				The a is LEFT | BASELINE.
				See {@link android.widget.GridLayout.LayoutParams#setGravity(int)}.
        -->
        <attr name="android:layout_gravity" />
    </declare-styleable>
    
    <declare-styleable name="slideswitch">
        <attr name="themeColor" format="color" />
        <attr name="isOpen" format="boolean" />
        <attr name="shape">
            <enum name="rect" value="1" />
            <enum name="circle" value="2" />
        </attr>
    </declare-styleable>

    <declare-styleable name="Emoji">
        <attr name="emojiSize" format="dimension" />
    </declare-styleable>

    <!-- RoundImageView -->
    <attr name="borderRadius" format="dimension" />
    <attr name="type">
        <enum name="circle" value="0" />
        <enum name="round" value="1" />
    </attr>

    <declare-styleable name="RoundImageView">
        <attr name="borderRadius" />
        <attr name="type" />
    </declare-styleable>

    <declare-styleable name="RoundProgressBar">
        <attr name="roundColor" format="color"/>
        <attr name="roundProgressColor" format="color"/>
        <attr name="roundWidth" format="dimension"></attr>
        <attr name="textColor" format="color" />
        <attr name="textSize" format="dimension" />
        <attr name="max" format="integer"></attr>
        <attr name="textIsDisplayable" format="boolean"></attr>
        <attr name="style">
            <enum name="STROKE" value="0"></enum>
            <enum name="FILL" value="1"></enum>
        </attr>
    </declare-styleable>

    <declare-styleable name="FlowLayout">
        <attr name="flow" format="boolean"/>
        <attr name="childSpacing" format="enum|dimension">
            <enum name="auto" value="-65536"/>
        </attr>
        <attr name="childSpacingForLastRow" format="enum|dimension">
            <enum name="auto" value="-65536"/>
            <enum name="align" value="-65537"/>
        </attr>
        <attr name="rowSpacing" format="enum|dimension">
            <enum name="auto" value="-65536"/>
        </attr>
        <attr name="rtl" format="boolean"/>
    </declare-styleable>


    <!-- 模糊效果 -->
    <declare-styleable name="MagnificentChart">
        <attr name="animation" format="boolean"/>
        <attr name="chartRound" format="boolean" />
        <attr name="shadow" format="boolean" />
        <attr name="showTitle" format="boolean" />
        <attr name="shadowColor" format="color" />
        <attr name="backgroundColor" format="color" />
    </declare-styleable>

    <!-- 自定义验证码输入框-->
    <declare-styleable name="VerifyCodeInput">
        <!--输入框的风格, 0:下划线, 1:外边框 -->
        <attr name="indicateType" format="integer" />
    </declare-styleable>

</resources>